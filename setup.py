#!/usr/bin/env python
"""
Script de configuraci√≥n para el Sistema M√©dico Blockchain
Ejecuta este script despu√©s de clonar el repositorio para configurar todo autom√°ticamente.
"""

import os
import sys
import subprocess
import platform

def run_command(command, description):
    """Ejecuta un comando y maneja errores"""
    print(f"\nüîß {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} completado")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en {description}: {e}")
        print(f"Output: {e.output}")
        return False

def main():
    print("üè• Sistema M√©dico Blockchain - Script de Configuraci√≥n")
    print("=" * 60)
    
    # Verificar Python
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
        print("‚ùå Python 3.8+ es requerido")
        return False
    
    print(f"‚úÖ Python {python_version.major}.{python_version.minor} detectado")
    
    # Instalar dependencias Python
    if not run_command("pip install -r requirements.txt", "Instalando dependencias de Python"):
        return False
    
    # Verificar si Node.js est√° instalado
    try:
        subprocess.run(["node", "--version"], check=True, capture_output=True)
        print("‚úÖ Node.js detectado")
        
        # Instalar dependencias Node
        if not run_command("npm install", "Instalando dependencias de Node.js"):
            return False
            
        # Compilar CSS
        if not run_command("npm run build-css", "Compilando Tailwind CSS"):
            return False
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  Node.js no detectado. CSS no ser√° compilado autom√°ticamente.")
        print("   Instala Node.js y ejecuta 'npm install && npm run build-css' manualmente.")
    
    # Crear migraciones
    if not run_command("python manage.py makemigrations", "Creando migraciones"):
        return False
    
    # Aplicar migraciones
    if not run_command("python manage.py migrate", "Aplicando migraciones"):
        return False
    
    print("\nüéâ ¬°Configuraci√≥n completada exitosamente!")
    print("\nüìã Pasos siguientes:")
    print("1. Crear superusuario: python manage.py createsuperuser")
    print("2. Ejecutar servidor: python manage.py runserver")
    print("3. Abrir en navegador: http://127.0.0.1:8000/blockchain/")
    print("\nüí° Para desarrollo con CSS en tiempo real:")
    print("   npm run watch-css (en terminal separada)")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
